nohup: ignoring input
/opt/caoshujian/stack_gan/code/miscc/config.py:101: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please read https://msg.pyyaml.org/load for full details.
  yaml_cfg = edict(yaml.load(f))
Using config:
{'CONFIG_NAME': '3stages',
 'CUDA': True,
 'DATASET_NAME': 'CUHK',
 'DATA_DIR': 'D:/NEW_HDGAN/StackGAN-v2-master/data/birds',
 'EMBEDDING_TYPE': 'cnn-rnn',
 'GAN': {'B_CONDITION': True,
         'DF_DIM': 64,
         'EMBEDDING_DIM': 128,
         'GF_DIM': 64,
         'NETWORK_TYPE': 'default',
         'R_NUM': 2,
         'Z_DIM': 100},
 'GPU_ID': '0',
 'TEST': {'B_EXAMPLE': True, 'SAMPLE_NUM': 30000},
 'TEXT': {'DIMENSION': 768},
 'TRAIN': {'BATCH_SIZE': 36,
           'COEFF': {'COLOR_LOSS': 0.0, 'KL': 2.0, 'UNCOND_LOSS': 0.0},
           'DISCRIMINATOR_LR': 0.0002,
           'FLAG': True,
           'GENERATOR_LR': 0.0002,
           'MAX_EPOCH': 600,
           'NET_D': '',
           'NET_G': '',
           'SNAPSHOT_INTERVAL': 1000,
           'VIS_COUNT': 64},
 'TREE': {'BASE_SIZE': 64,
          'BASE_SIZE_1': 64,
          'BASE_SIZE_2': 32,
          'BRANCH_NUM': 3},
 'WORKERS': 4}
/home/caoshujian/anaconda3/lib/python3.8/site-packages/torchvision/transforms/transforms.py:280: UserWarning: Argument interpolation should be of type InterpolationMode instead of int. Please, use InterpolationMode enum.
  warnings.warn(
Load filenames from: /opt/caoshujian/HD_GAN/Data/train/train_files_1w.pickle (10000)
DataParallel(
  (module): G_NET(
    (ca_net): CA_NET(
      (fc): Linear(in_features=768, out_features=512, bias=True)
      (relu): GLU()
    )
    (h_net1): INIT_STAGE_G(
      (fc): Sequential(
        (0): Linear(in_features=228, out_features=16384, bias=False)
        (1): BatchNorm1d(16384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): GLU()
      )
      (upsample1): Sequential(
        (0): Interpolate()
        (1): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (2): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (3): GLU()
      )
      (upsample2): Sequential(
        (0): Interpolate()
        (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (3): GLU()
      )
      (upsample3): Sequential(
        (0): Interpolate()
        (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (3): GLU()
      )
      (upsample4): Sequential(
        (0): Interpolate()
        (1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (3): GLU()
      )
    )
    (img_net1): GET_IMAGE_G(
      (img): Sequential(
        (0): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): Tanh()
      )
    )
    (h_net2): NEXT_STAGE_G(
      (jointConv): Sequential(
        (0): Conv2d(192, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): GLU()
      )
      (residual): Sequential(
        (0): ResBlock(
          (block): Sequential(
            (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): GLU()
            (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): ResBlock(
          (block): Sequential(
            (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): GLU()
            (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (upsample): Sequential(
        (0): Interpolate()
        (1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (3): GLU()
      )
    )
    (img_net2): GET_IMAGE_G(
      (img): Sequential(
        (0): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): Tanh()
      )
    )
    (h_net3): NEXT_STAGE_G(
      (jointConv): Sequential(
        (0): Conv2d(160, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): GLU()
      )
      (residual): Sequential(
        (0): ResBlock(
          (block): Sequential(
            (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): GLU()
            (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): ResBlock(
          (block): Sequential(
            (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): GLU()
            (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (upsample): Sequential(
        (0): Interpolate()
        (1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (3): GLU()
      )
    )
    (img_net3): GET_IMAGE_G(
      (img): Sequential(
        (0): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): Tanh()
      )
    )
  )
)
# of netsD 3
[1/600][277] Loss_D: 4.09 Loss_G: 3.27 Loss_KL: 0.12 lr_g: 0.00020000 lr_d: 0.00020000 Time: 66.38s
                                  
[2/600][277] Loss_D: 4.10 Loss_G: 3.59 Loss_KL: 0.09 lr_g: 0.00020000 lr_d: 0.00020000 Time: 64.74s
                                  
[3/600][277] Loss_D: 3.41 Loss_G: 4.78 Loss_KL: 0.16 lr_g: 0.00020000 lr_d: 0.00020000 Time: 65.18s
                                  
[4/600][277] Loss_D: 3.52 Loss_G: 6.97 Loss_KL: 0.36 lr_g: 0.00020000 lr_d: 0.00020000 Time: 65.99s
                                  
[5/600][277] Loss_D: 3.67 Loss_G: 5.66 Loss_KL: 0.50 lr_g: 0.00020000 lr_d: 0.00020000 Time: 65.10s
                                  
[6/600][277] Loss_D: 3.66 Loss_G: 5.94 Loss_KL: 0.57 lr_g: 0.00020000 lr_d: 0.00020000 Time: 64.98s
                                  
[7/600][277] Loss_D: 4.00 Loss_G: 6.54 Loss_KL: 1.03 lr_g: 0.00020000 lr_d: 0.00020000 Time: 64.88s
                                  
[8/600][277] Loss_D: 3.62 Loss_G: 9.11 Loss_KL: 1.34 lr_g: 0.00020000 lr_d: 0.00020000 Time: 65.89s
                                  
[9/600][277] Loss_D: 4.61 Loss_G: 5.82 Loss_KL: 1.54 lr_g: 0.00020000 lr_d: 0.00020000 Time: 65.16s
                                  
[10/600][277] Loss_D: 4.15 Loss_G: 6.90 Loss_KL: 1.99 lr_g: 0.00020000 lr_d: 0.00020000 Time: 65.29s
                                  
[11/600][277] Loss_D: 3.53 Loss_G: 9.08 Loss_KL: 2.05 lr_g: 0.00020000 lr_d: 0.00020000 Time: 66.02s
                                  
[12/600][277] Loss_D: 3.46 Loss_G: 7.35 Loss_KL: 2.14 lr_g: 0.00020000 lr_d: 0.00020000 Time: 65.33s
                                  
[13/600][277] Loss_D: 2.10 Loss_G: 11.70 Loss_KL: 2.21 lr_g: 0.00020000 lr_d: 0.00020000 Time: 65.32s
                                  
[14/600][277] Loss_D: 3.85 Loss_G: 9.10 Loss_KL: 2.69 lr_g: 0.00020000 lr_d: 0.00020000 Time: 65.38s
                                  
[15/600][277] Loss_D: 3.01 Loss_G: 11.41 Loss_KL: 3.04 lr_g: 0.00020000 lr_d: 0.00020000 Time: 66.09s
                                  
[16/600][277] Loss_D: 3.49 Loss_G: 12.49 Loss_KL: 3.09 lr_g: 0.00020000 lr_d: 0.00020000 Time: 65.35s
                                  
[17/600][277] Loss_D: 2.17 Loss_G: 16.67 Loss_KL: 3.64 lr_g: 0.00020000 lr_d: 0.00020000 Time: 65.38s
                                  
[18/600][277] Loss_D: 3.82 Loss_G: 13.89 Loss_KL: 3.96 lr_g: 0.00020000 lr_d: 0.00020000 Time: 65.38s
                                  
[19/600][277] Loss_D: 2.70 Loss_G: 18.56 Loss_KL: 4.21 lr_g: 0.00020000 lr_d: 0.00020000 Time: 66.09s
                                  
[20/600][277] Loss_D: 2.41 Loss_G: 16.48 Loss_KL: 4.65 lr_g: 0.00020000 lr_d: 0.00020000 Time: 65.27s
                                  
[21/600][277] Loss_D: 1.18 Loss_G: 20.77 Loss_KL: 4.44 lr_g: 0.00020000 lr_d: 0.00020000 Time: 65.37s
                                  
[22/600][277] Loss_D: 0.57 Loss_G: 16.56 Loss_KL: 5.14 lr_g: 0.00020000 lr_d: 0.00020000 Time: 66.09s
                                  
[23/600][277] Loss_D: 1.61 Loss_G: 16.46 Loss_KL: 4.69 lr_g: 0.00020000 lr_d: 0.00020000 Time: 65.23s
                                  
[24/600][277] Loss_D: 1.28 Loss_G: 21.68 Loss_KL: 5.60 lr_g: 0.00020000 lr_d: 0.00020000 Time: 65.26s
                                  
